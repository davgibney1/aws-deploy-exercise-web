{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "OpsWorks stack and Code Pipeline, to deploy web servers",
  
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair for SSH access to the instances.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "RepositoryName": {
      "Description": "What to name a new CodeCommit repo",
      "Default": "cicd-exercise",
      "Type": "String",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "(Use only ASCII characters.)"
    },
    "RepositoryBranch": {
      "Description": "What to name the branch for the CodeCommit repo",
      "Type": "String",
      "Default": "master",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "(Use only ASCII characters.)"
    },
    "AnS3Bucket": {
      "Description": "What is an existing S3 bucket you would like to use",
      "Type": "String",
      "Default": "my-demo-s3-bucket-pdx-2017",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "(Use only ASCII characters.)"
    }
  },
    
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Dynamic Configuration"
          },
          "Parameters": [
            "KeyName"
          ]
        },
        {
          "Label": {
            "default": "CodeCommit Configuration"
          },
          "Parameters": [
            "RepositoryName",
            "RepositoryBranch"
          ]
        }
      ]
    }
  },
  
  "Mappings": {
      "Region2AMI":{
        "us-west-2": {
            "AMIID": "ami-f009cb88"
        }
      }
  },
    
    
  "Resources": {
    
    "CPDeploySecGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "To manage OpsWorks instances deployed to by CodePipeline"
      }
    },
    
    "CPDeploySecGroupIngressHTTP": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Fn::GetAtt": [
            "CPDeploySecGroup",
            "GroupId"
          ]
        }
      }
    },
    
    "CPDeploySecGroupIngressSSH": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "10.10.10.0/0",
        "GroupId": {
          "Fn::GetAtt": [
            "CPDeploySecGroup",
            "GroupId"
          ]
        }
      }
    },
    
    "MyStack": {
      "Type": "AWS::OpsWorks::Stack",
      "Properties": {
        "Name": {
          "Ref": "AWS::StackName"
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "OpsWorksServiceRole",
            "Arn"
          ]
        },
        "ConfigurationManager": {
          "Name": "Chef",
          "Version": "12.2"
        },
        "DefaultOs": "Amazon Linux 2017.09",
        "DefaultInstanceProfileArn": {
          "Fn::GetAtt": [
            "OpsWorksInstanceProfile",
            "Arn"
          ]
        }
      }
    },
    
    "MyLayer": {
      "Type": "AWS::OpsWorks::Layer",
      "Properties": {
        "StackId": {
          "Ref": "MyStack"
        },
        "Name": "MyLayer",
        "Type": "web-server",
        "Shortname": "mylayer",
        "EnableAutoHealing": "false",
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "false",
        "CustomSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "CPDeploySecGroup",
              "GroupId"
            ]
          }
        ]
      },
      "DependsOn": [
        "MyStack",
        "CPDeploySecGroup"
      ]
    },
    
    "OpsWorksServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "opsworks.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "opsworks-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:*",
                    "iam:PassRole",
                    "cloudwatch:GetMetricStatistics",
                    "elasticloadbalancing:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    
    "OpsWorksInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "OpsWorksInstanceRole"
          }
        ]
      }
    },
    
    "OpsWorksInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "s3get",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    
    "MyInstance": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "LayerIds": [
          {
            "Ref": "MyLayer"
          }
        ],
        "StackId": {
          "Ref": "MyStack"
        },
        "InstanceType": "t2.nano",
        "SshKeyName": {
          "Ref": "KeyName"
        }
      }
    },
    
    "CodePipelineTrustRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codepipeline.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
      
    "CodePipelineRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodePipelinePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:PutObject"
              ],
              "Resource": [
                { "Ref": "AnS3Bucket" }
              ],
              "Effect": "Allow"
            },
            {
              "Action":[
                "codecommit:GetBranch",
                "codecommit:GetCommit",
                "codecommit:UploadArchive",
                "codecommit:GetUploadArchiveStatus",
                "codecommit:CancelUploadArchive"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "codepipeline:*",
                "iam:ListRoles",
                "iam:PassRole",
                "opsworks:*",
                "elasticbeanstalk:DescribeApplications",
                "elasticbeanstalk:DescribeEnvironments",
                "lambda:GetFunctionConfiguration",
                "lambda:ListFunctions"
              ],
              "Resource": "*",
              "Effect": "Allow"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodePipelineTrustRole"
          }
        ]
      }
    },
    
    "MyOpsWorksApp": {
      "Type": "AWS::OpsWorks::App",
      "Properties": {
        "StackId": {
          "Ref": "MyStack"
        },
        "Type": "nginx",
        "Shortname": "nginx",
        "Name":{
          "Ref": "AWS::StackName"
        },
        "AppSource": {
          "Type": "other"
        }
      }
    },
    
    "MyPipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "DependsOn": [
        "MyStack",
        "MyOpsWorksApp",
        "MyLayer",
        "MyInstance"
      ],
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-Pipeline"
            ]
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "CodePipelineTrustRole",
            "Arn"
          ]
        },
        "Stages": [
          {
            "Name": "Source",
            "Actions": [
              {
                "InputArtifacts": [

                ],
                "Name": "Source",
                "ActionTypeId": {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeCommit"
                },
                "OutputArtifacts": [
                  {
                    "Name": "MyApp"
                  }
                ],
                "Configuration": {
                  "BranchName": {
                    "Ref": "RepositoryBranch"
                  },
                  "RepositoryName": {
                    "Ref": "RepositoryName"
                  }
                },
                "RunOrder": 1
              }
            ]
          },
          {
            "Name": "Deploy",
            "Actions": [
              {
                "InputArtifacts": [
                  {
                    "Name": "MyApp"
                  }
                ],
                "Name": "DeployPHPApp",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "OpsWorks"
                },
                "OutputArtifacts": [

                ],
                "Configuration": {
                  "StackId": {
                    "Ref": "MyStack"
                  },
                  "AppId": {
                    "Ref": "MyOpsWorksApp"
                  },
                  "DeploymentType": "deploy_app",
                  "LayerId": {
                    "Ref": "MyLayer"
                  }
                },
                "RunOrder": 1
              }
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": {
            "Fn::Join": [
              "",
              [
                "codepipeline-",
                {
                  "Ref": "AWS::Region"
                },
                "-",
                {
                  "Ref": "AWS::AccountId"
                }
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "PipelineUrl": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/codepipeline/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#/view/",
            {
              "Ref": "MyPipeline"
            }
          ]
        ]
      },
      "Description":"Pipeline Url"
    }
  }
}